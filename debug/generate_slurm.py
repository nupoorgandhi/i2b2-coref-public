from argparse import ArgumentParser
import glob
import os
"""
generate script to run the structural probes for all .yaml files generated by generate_yaml.py
python generate_slurm.py --yaml_root /projects/tir4/users/nmgandhi/coref/config/str_probe --generate_projections
"""
TARGET_EXAMPLE_RANGE = [100]#[20]#[10,20,30,40,50,60,70,80,90,100] # min, max number of target examples
MAXEX = 100
SAMPLE_ID = 3
PROBE_RANGE = {'mr':[700],#1000,1500,700],#[1000, 2000, 2300], # maximum rank
               'w':[.5],#,.8],#[0, .2, .4, .5, .6,.8]
               'dl':['True'],
               # 'kw':[0]
               # 'c':['True']
              }

SAVE_EMB_RANGE = {
    'maxex':[20, 50, 100, 150, 200],
    'ratio':[.875,.75,.625,.5,.375]#[.95]
}


def run_probe_slrm(args, yaml_files):
    yaml_files_packed = []
    pack = []
    # yaml_files = yaml_files[3:]
    for i in range(len(yaml_files)):
        if i % 2 == 0 and i > 0:
            yaml_files_packed.append(pack)
            pack = []
        pack.append(yaml_files[i].strip())
    if len(pack) > 0:
        yaml_files_packed.append(pack)

    for i, yaml_file_pack in enumerate(yaml_files_packed):

        # job = line.strip()

        if len(yaml_file_pack) == 6:
            os.system(
                'sbatch -J {} --exclude=compute-0-7,compute-0-36,compute-1-13,compute-0-3,compute-1-7,compute-1-18,compute-1-11,compute-0-17 {} {} {} {} {} {}'.format(
                    'probe_' + str(i),
                    args.slrm_file,
                    *yaml_file_pack))
        if len(yaml_file_pack) == 5:
            os.system(
                'sbatch -J {} --exclude=compute-0-7,compute-0-36,compute-1-13,compute-0-3,compute-1-7,compute-1-18,compute-1-11,compute-0-17 {} {} {} {} {}'.format(
                    'probe_' + str(i),
                    args.slrm_file,
                    *yaml_file_pack))

        if len(yaml_file_pack) == 4:
            os.system('sbatch -J {} --exclude=compute-0-7,compute-0-36,compute-1-13,compute-0-3,compute-1-7,compute-1-18,compute-1-11,compute-0-17 {} {} {} {} {}'.format('probe_' + str(i),
                                                                                                                                    args.slrm_file,
                                                                                                                                    *yaml_file_pack))
        if len(yaml_file_pack) == 3:
            os.system('sbatch -J {} --exclude=compute-0-7,compute-0-36,compute-1-13,compute-0-3,compute-1-7,compute-1-18,compute-1-11,compute-0-17 {} {} {} {}'.format('probe_' + str(i),
                                                                                                                                    args.slrm_file,
                                                                                                                                    *yaml_file_pack))

        if len(yaml_file_pack) == 2:
            os.system('sbatch -J {} --exclude=compute-0-7,compute-0-36,compute-1-13,compute-0-3,compute-1-7,compute-1-18,compute-1-11,compute-0-17 {} {} {}'.format('probe_' + str(i),
                                                                                                                                    args.slrm_file,
                                                                                                                                    *yaml_file_pack))
        if len(yaml_file_pack) == 1:
            os.system(
                'sbatch -J {} --exclude=compute-0-7,compute-0-9,compute-0-36,compute-1-13,compute-0-3,compute-1-7,compute-1-18,compute-1-11,compute-0-17 {} {}'.format('probe_' + str(i),
                                                                                                                                  args.slrm_file,
                                                                                                                                  *yaml_file_pack))

        print('starting job {}'.format('\n'.join(yaml_file_pack)))

def run_save_emb_slrm(args, dataset, maxex, partition):

    os.system('sbatch -J {} {} {} {} {} {}'.format('save_emb_r={}_m={}'.format(partition, maxex), args.slrm_file, args.conf_file, dataset, maxex, partition))
    print('starting job {}'.format('save_emb_r={}_m={}'.format(partition, maxex)))

def get_yaml_within_range(yaml_root):
    yaml_files = glob.glob(yaml_root + '/*.yaml', recursive=True)
    valid_yamls = []
    # print('yaml_files:', yaml_files)
    for yaml_file in yaml_files:
        valid_yaml = True
        # check num target examples
        valid_num = False
        for valid_target_num in TARGET_EXAMPLE_RANGE:
            # if 'sid{}-{}-{}'.format(valid_target_num,MAXEX-valid_target_num,SAMPLE_ID) in yaml_file:
            if 'sid'+str(valid_target_num)+'-'+str(MAXEX-valid_target_num) in yaml_file:
                valid_num = True
        valid_yaml &= valid_num

        for param, valid_vals in PROBE_RANGE.items():
            valid_param = False
            for val in valid_vals:
                if param+ str(val) in yaml_file:
                    valid_param = True
            valid_yaml &= valid_param
        if valid_yaml:
            print(yaml_file)
            valid_yamls.append(yaml_file)
    print('number of yamls:', len(valid_yamls))
    user_input = input("is this okay? (reply y)")
    print('user input received', str(user_input))
    if user_input == 'y':
        return valid_yamls
    else:
        exit(0)

def handle_save_emb_jobs(args):
    for dataset in ['src']:
        for maxex in SAVE_EMB_RANGE['maxex']:
            partitions = ['train']
            if (dataset == 'src' and maxex == 100) or (dataset == 'tgt' and maxex == 50):
                partitions.append('dev')
            for partition in partitions:
                run_save_emb_slrm(args, dataset, maxex, partition)

def handle_umls_jobs(args):
    docs_root = args.docs_root
    docs = glob.glob(docs_root + '/*.txt', recursive=True)
    for i, input_doc in enumerate(docs):
        output_doc = input_doc[:-len('.txt')] + '.umls.json'

        print('running input {}, output {}'.format(input_doc, output_doc))

        with open(args.umls_jobs_file, "a+") as file_object:
            # Append 'hello' at the end of file
            file_object.write("{} {}\n".format(input_doc, output_doc))





if __name__ == '__main__':
    argp = ArgumentParser()


    argp.add_argument('--yaml_root', default="/projects/tir4/users/nmgandhi/coref/config/str_probe", type=str,
                      help='directory where all yaml folders were written to')
    argp.add_argument('--docs_root', default="/projects/tir4/users/nmgandhi/coref/data/docs", type=str,
                      help='directory where all yaml folders were written to')
    argp.add_argument("--slrm_file", default='probe.slrm', type=str, help='Slrm file')
    argp.add_argument("--generate_projections", action='store_true', help='generates projections')
    argp.add_argument("--generate_save_emb", action='store_true', help='save embeddinhs')
    argp.add_argument("--generate_umls", action='store_true', help='save umls')

    argp.add_argument("--umls_jobs_file", action='store_true', help='save umls')

    argp.add_argument("--conf_file", default='/projects/tir4/users/nmgandhi/coref/config/span_emb.conf', type=str, help='conf')


    cli_args = argp.parse_args()

    if cli_args.generate_projections:
        valid_yamls = get_yaml_within_range(cli_args.yaml_root)
        run_probe_slrm(cli_args, valid_yamls)
    elif cli_args.generate_save_emb:
        handle_save_emb_jobs(cli_args)
    elif cli_args.generate_umls:
        handle_umls_jobs(cli_args)

